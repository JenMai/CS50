0.  What is pneumonoultramicroscopicsilicovolcanoconiosis?
It is the longest English word used as a reference to set a length limit for speller.c, in order to evaluate if each chain of characters 
going through the check is short enough/is actually a word.

1.  According to its man page, what does getrusage do?
This function evaluates the resources used to run the program. Resources can be user/system CPU time, memory size, stack size,
input/ouput operations...

2.  Per that same man page, how many members are in a variable of type struct rusage?
There are 16 members within the struct, each of them evaluating different resources used.

3.  Why do you think we pass before and after by reference (instead of by value) to calculate, even though we’re not changing their contents?
If they were passed by value, the changes would only occur within the function and not main. Besides, the variables before and after are mostly used
to evaluate the time spent for every function (the sum of them all is calculated afterwards). Their value at the end is not printed or 
as "relevant" as time_check etc... So no need to use more memory for them to keep track of the stats that matter.

4.  Explain as precisely as possible, in a paragraph or more, how main goes about reading words from a file. In other words, 
    convince us that you indeed understand how that function’s for loop works.
- After ensuring proper usage, variables are declared to keep track of the word's index in the char array "word", which stocks each word
in an allocated space of LENGTH+1 (45 characters + '\0'); to keep track of misspelled words and words in total. The for loop stores one
character at a time from a textfile (with a file pointer and a function called fgetc) in a variable "c" and ends when End of File is reached.
- Once the loop starts, if the pointer points to an alphabetical character or an apostrophe (as long as the latter is within a word), the char
is stored in the array called word and index is incremented to be associated with the next alphabetical char. However, if index is more than 45,
the count is reset for the next word and the current word is ignored. 
- Else if a number is pointed at, the counter is also reset for the next word, the current word is ignored.
- If other if-statements aren't fulfilled, we must have a whole word, the current word is ended with a '\0' (end marker in memory for a string),
the total word counter (words) is incremented. A bool function checks whether the word is misspelled (using a loaded dictionary), 
if so (returns True), it prints the word and increment misspellings. Finally, the index is reset for next words.
- Once fgetc pointed at every character until EOF, an error is returned if any, the textfile is closed, dictionary used is unloaded (if possible)
and stats about the textfile and functions' running time are printed.

5.  Why do you think we used fgetc to read each word’s characters one at a time rather than use fscanf with a format string like "%s" 
    to read whole words at a time? Put another way, what problems might arise by relying on fscanf alone?
If fscanf passed through wole words at a time, they would be passed in before checking if each of those words are legal, leading in
unnecessary resources used. (?)

6.  Why do you think we declared the parameters for check and load as const (which means "constant")?
The word going through check and the loaded dictionary must not be altered at all by the program through its execution. 
A constant data type ensures it won't happen.
